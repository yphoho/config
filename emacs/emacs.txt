进入帮助系统很简单，只需要输入C-h（或F1）并跟随要获取帮助的对象，初次使用Emacs的用户可以输入C-h t进入使用手册
离开帮助窗口                                    C-x 1
滚动帮助窗口                                    C-M-v
匹配：显示与字符a串匹配的命令                   C-h a
显示一个键的功能                                C-h c
详细描述一个功能                                C-h f
取得详细模式的信息                              C-h m

恢复系统崩溃后丢失的文件                        M-x recover-file
使缓冲回复到初始内容                            M-x revert-buffer

向后查找                                        C-r
规则表达式查找                                  C-M-s
反向规则表达式查找                              C-M-r
选择前一个查找字符串                            M-p
选择下一个查找字符串                            M-n
退出增量查找                                    RET
取消上一个字符的作用                            DEL(Backspace)
退出当前查找模式                                C-g
在查找的过程中可重复使用C-s和C-r来改变查找方向

向前一个字                                      M-f
向后一个字                                      M-b
到句首                                          M-a
到句尾                                          M-e
到段首                                          M-{
到段尾                                          M-}
到页首                                          C-x [
到页尾                                          C-x ]
到表达式首部                                    C-M-f
到表达式尾部                                    C-M-b
到函数首部                                      C-M-a
到函数尾部                                      C-M-e
滚动到右边一屏（内容向左移动）                  C-x <
滚动到左边一屏（内容向右移动）                  C-x >
滚动当前行到屏幕中央                            C-u C-l

向前delete到字首                                M-d
向后delete到字尾                                M-DEL(Backspace)
向前delete到行首                                M-0 C-k
向后delete到行尾                                C-k
向前delete到句首                                C-x DEL(Backspace)
向后delete到句尾                                M-k
向前delete到表达式首部                          M-- C-M-k
向后delete到表达式尾部                          C-M-k
Kill到下一个给定字符出现的位置                  M-z <char>

标记当前位置                                    C-SPC或C-@
以字符为单位使用移动命令动态标记区域            C-x C-x
以字为单位使用移动命令动态标记区域              M-@
标记一段                                        M-h
标记一页                                        C-x C-p
标记一个表达式                                  C-M-@
标记一个函数                                    C-M-h

交互式地替换一个规则表达式                      M-x query-replace-regexp
替换当前的并移动到下一处                        SPE
替换当前的但不移动到下一处                      ,
不替换当前的并移动到下一处                      L(Backspace)
替换所有剩下的符合条件的文本                    !
退出替换模式                                    RET
进入递归的编辑模式                              C-r
退出递归的编辑模式                              C-M-c

（When two commands are shown，the second is for “other frame”）
上下分割当前窗口                                C-x 2 C-x 5 2
左右分割当前窗口                                C-x 3
删除当前窗口                                    C-x 0 C-x 5 0
滚动其它窗口                                    C-M-v
选择另一个窗口中的缓冲                          C-x 4 b C-x 5 b
显示另一个窗口中的缓冲                          C-x 4 C-o C-x 5 C-o
在另一窗口中查找并打开文件                      C-x 4 f C-x 5 f
在另一窗口中以只读方式打开文件                  C-x 4 r C-x 5 r
在另一窗口中运行dired命令                       C-x 4 d C-x 5 d
在另一窗口中查找tag                             C-x 4 . C-x 5 .
增加窗口高度                                    C-x ^
减小窗口宽度                                    C-x {
增加窗口宽度                                    C-x }


缩进区域（与模式相关）                          C-M-\
缩进表达式（与模式相关）                        C-M-q
Indent region rigidly arg. Columns                    C-x TAB
在光标后插入一个新的行                          C-o
静态地将一行下移                                C-M-o
删除光标附近的空行（留下一行）                  C-x C-o
与上一行合并成一行                              M-^
删除光标附近的所有空格                          M-
删除光标附近的空格（留下一格）                  M-SPC
Fill paragraph                                     M-q
Set fill column                                    C-x f
设置每一行开始的前缀                            C-x .
设置字体                                        M-g

将一个字设置为大写                              M-u
将一个字设置为小写                              M-l
将一个字首字母设置为大写                        M-c
将一个区域设置为大写                            C-x C-u
将一个区域设置为小写                            C-x C-l

(the following keys are defined in the minibuffer)
最大程度地补全命令                              TAB
补全命令中的一个字                              SPC
完成并执行一个命令                              RET
列出命令所有可能的后续部分                      ?
列出在当前命令之前输入的命令                    M-p
列出在当前命令之后输入的命令                    M-n
用规则表达式在命令历史记录中向后搜寻            M-r
用规则表达式在命令历史记录中向前搜寻            M-s
重复执行上一条命令                              C-x ESC ESC


字符置换                                        C-t
字置换                                          M-t
行置换                                          C-x C-t
表达式置换                                      C-M-t

对当前的字进行拼写检查                          M-$
检查区域内所有的字                              M-x ispell-origin
检查缓冲内所有的字                              M-x ispell-buffer

Regexp search on all files in tabs table                 M-x tags-search
在所有文件中执行查询-替换                       M-x tags-query-replace
继续进行上一次标记查找或查询-替换               M-,

执行一个shell命令                               M-！
在一个区域上执行sheel命令                       M-|
通过shell命令过滤区域                           C-u M-|
在窗口中启动一个shell                            M-x shell

拷贝一个矩形到寄存器                            C-x r r
Kill矩形                                         C-x r k
拉回矩形                                        C-x r y
打开一个矩形, 将文本移动至右边                  C-x r o
清空矩形                                        C-x r c
为矩形中每一行加上一个字符串前缀                C-x r t

除换行符外的所有单个字符                        .
零个或多个重复                                  *
一个以上的重复                                  +
零个或一个重复                                  ?
转译字符                                        
选择（or）                                      |
分组                                            (…)
与第n个组相同的文本                            n
At work break                                    b
Not at work break                                 B

存储区域到寄存器                                C-x r s
插入矩形内容到缓冲                              C-x r i
存储光标位置到寄存器                            C-x r SPC <num>
跳跃到寄存器中存储的光标位置                    C-x r j <num>

开始定义一个键盘宏                              C-x (
结束键盘宏的定义                                C-x )
执行上一次定义的键盘宏                          C-x e
追加到上一个键盘宏                              C-u C-x (
为上一个键盘宏命名                              M-x name-last-kbd-macro
在缓冲中插入Lisp                                M-x insert-kbd-macro


Tags
    Tags 是一个显为人知的功能? 所以我想提一下. 这不是emacs发明的, 而是vi 原本的特异功能. emacs只是发扬光大而已.
假设你有一个目录, 里面是一个程式的原始码, 比如说, tin 的原始码, 放在 ~/tin-1.3beta 下面. 你想看它们.
首先, 叫emacs cd到该目录: 　M-x cd
然后, 建立tag table. tag table 就是一张对照表, 记录哪个符号(variable/function call) 对映到哪个档案的哪个地方. 有这张表, emacs可以让我们快速的在程式码内游走. 一般这张表是一个档案, 叫作TAGS (大写)
　 M-! etags *.c
M-! 是执行external shell command的意思. etags就是emacs的建表程式. 你只要告诉它你的source code在那里即可.
vi的话是使用ctags这个程式, 它建出来的档名叫tags (小写). 因为我们介绍emacs, 所以不管它.
然后, 怎么看程式? 你知道所有的C 程式都是由main()开始, 所以你想找到main()在哪个档案. 这时只要按　M-. 然后emacs会问你tag table在哪里. 因为我们已经cd到该目录, 直接按enter就好了. 然后输入main, emacs就会把你带到main(){ ... }去.
如果 你看到某个程式片断呼叫一个你没看过的函式, 你可以把游标移到该函式的名字上, M-. ENTER 就搞定了.
如果 emacs找错了 (比如有变数和函式同名, emacs跳到变数去), 那你可以用 C-u M-. 找下一个.
在编辑程式码的时候, M-SPC 很有用, 它会把游标附近的空白缩成一个. 在其它地方也有效.


拼写检查
当然只是针对英文。
Ispell
选中一块区域，或者对整个编辑缓冲区进行拼写检查: M-x ispell-buffer RET, 这时会打开ispell缓冲区，C-h可以查看一些拼写检查的帮助信息。
检查单词。在一个单词上执行M-$，会对这个单词进行拼写检查。
单词拼写补全。在一个未拼完的单词后执行ESC TAB(M-TAB)。
只要启用过Ispell, 他就将一直在后台运行。M-x ispell-kill-ispell，可以杀死这个进程。
感觉很好用。
flyspell
一个扩展，可以在编辑的时候直接进行拼写检查，也就是spell-check on the fly。它也是利用Ispell。
M-x flyspell-mode RET



改变buffer的只读属性
M-x toggle-read-only

在C模式下输入tab
C-q TAB : 对TAB不做解释，直接输
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
C和C++模式
===指定为C++模式的方法===
一般根据扩展名自动设定，不用指定，不过有时候若希望.h文件是C++模式的（缺省是C模式），在文件第一行（或其末尾）上加入
// -*- C++ -*-

===语法高亮===
不是C模式专有，M-x global-font-lock-mode RET 或在.emacs中加入(global-font-lock-mode t)。

===子模式===
auto-state 输入时自动缩进，自动换行
hungry-state Backspace时，自动删除尽可能多的空白和空行
C-c C-t 同时转换(开/关)auto-state和hungry-state子模式
C-c C-a 转换 auto-state 子模式
C-c C-d 转换 hungry-state 子模式

===编辑命令===
C-c . 设置缩进风格（按TAB键可列出可用的风格，缺省的为gnu，其缩进为2个字符；linux为8个；k&r为5个，java为4个）
TAB 重新缩进当前行
M-/ 自动补齐（缓冲区中能找得到的串）
M-; 行尾加入注释
C-c C-e 扩展宏
C-c C-c 注释掉整个区域
C-u C-c C-c 取消注释
C-c C-/ 将区域中的每一行结尾都加入一个'/'字符
M-x c-beginning-of-defun
M-x c-end-of-defun  跳到函数的开头或结尾
C-c C-u    跳转到前面的一个＃ifdef 
C-c C-p
C-c C-n   跳转到宏的开头或结尾
C-M-h   选中整个函数区域
C-c C-\   在所选区域的每一行后面添加" \ "
C-M-p   跳转到}或）匹配的括号
C-M-n   跳转到（或{匹配的括号
M-x auto-insert 自动添加
   #ifndef TEST_H
   #define TEST_H
   #endif
M-@  把光标移动到单词开头，选中整个单词区域
C-M-h  选中当前行
C-u, C-@   回到上次标签的位置


===编译和调试===
M-x compile RET 编译
M-x gdb RET 调试
C-x ` （出错信息中）下一个错误，一个窗口显示错误信息，另一个显示源码的出错位置
C-c C-c 转到出错位置
启动gdb调试器后，光标在源码文件缓冲区中时：
C-x SPC 在当前行设置断点
C-x C-a C-s step
C-x C-a C-n next
C-x C-a C-t tbreak
C-x C-a C-r continue

Dired模式
常用命令：
m : mark
u : unmark
d : mark delete
D : 立即删除
x : 执行删除
g : refresh
C : copy
R : move
+ : 创建目录

Hideshow minor mode
在编程时可以隐藏函数的实现。M-x hs-minor-mode
(setq hs-minor-mode-prefix [(contrl o)]) 可以改变复杂的命令前缀.
用法：
`C-c @ C-h' : Hide the current block (`hs-hide-block').
`C-c @ C-s' : Show the current block (`hs-show-block').
`C-c @ C-c' : Either hide or show the current block (`hs-toggle-hiding')
`C-c @ C-M-h' : Hide all top-level blocks (`hs-hide-all').
`C-c @ C-M-s' : Show everything in the buffer (`hs-show-all').


十六进制模式
M-x hexl-find-file	以16进制打开文件
M-x hexl-mode	查看文本的十六进制编码
C-M-x	以16进制编辑一个字节 








etags:
find . -name "*.[chCH]" -print | etags -
这样就可以在当前目录生成一个TAGS文件，剩下的就是在emacs当中使用了！
在emacs中大致记住三个命令
   1.ESC x visit-tags-table RETURN －－打开Tags tabs文件
   2.M-. 假定当前你把光标放在某个函数或其他语法对象上，这个命令在当前窗口打开当前查找的对象声明，定义所在
   3.C-x 4. 这个在一个新窗口中打开－－个人认为在阅读代码时这个命令或许更加适用。
   4.M-* 退回到上一跳转处

emacs编辑远程文件：
/host:filename 
/user@host:filename 
/user@host#port:filename 
/method:user@host:filename 
/method:user@host#port:filename
method可以是：ftp,ssh,rlogin,telnet等可以远程登录的程序，其缺省的是
如果主机名称以"ftp."开始，那就用ftp
如果用户名称是ftp或者anonymous，那也用ftp
其余的缺省是ssh



5.18 How do I use an already running Emacs from another window?
http://www.gnu.org/software/emacs/emacs-faq.html

emacsclient, which comes with Emacs, is for editing a file using an already running Emacs rather than starting up a new Emacs. It does this by sending a request to the already running Emacs, which must be expecting the request.
Setup:
Emacs must have executed the server-start function for ‘emacsclient’ to work. This can be done either by a command line option:
          emacs -f server-start
or by invoking server-start from .emacs:
          (if (some conditions are met) (server-start))
When this is done, Emacs creates a Unix domain socket named server in /tmp/emacsuserid. See server-socket-dir.

To get your news reader, mail reader, etc., to invoke ‘emacsclient’, try setting the environment variable EDITOR (or sometimes VISUAL) to the value ‘emacsclient’. You may have to specify the full pathname of the ‘emacsclient’ program instead. Examples:

          # csh commands:
          setenv EDITOR emacsclient
          
          # using full pathname
          setenv EDITOR /usr/local/emacs/etc/emacsclient
          
          # sh command:
          EDITOR=emacsclient ; export EDITOR
Normal use:
When ‘emacsclient’ is run, it connects to the socket and passes its command line options to Emacs, which at the next opportunity will visit the files specified. (Line numbers can be specified just like with Emacs.) The user will have to switch to the Emacs window by hand. When the user is done editing a file, the user can type C-x # (or M-x server-edit) to indicate this. If there is another buffer requested by emacsclient, Emacs will switch to it; otherwise emacsclient will exit, signaling the calling program to continue.

There is an alternative version of ‘emacsclient’ called ‘gnuserv’, written by Andy Norman (see Packages that do not come with Emacs). ‘gnuserv’ uses Internet domain sockets, so it can work across most network connections.
The most recent ‘gnuserv’ package is available at
http://meltin.net/hacks/emacs/



How can I start Emacs in fullscreen mode on MS-Windows?

Use the function w32-send-sys-command. For example, you can put the following in your .emacs file:
     (add-hook 'term-setup-hook
               #'(lambda () (w32-send-sys-command ?\xF030)))
To avoid the slightly distracting visual effect of Emacs starting with its default frame size and then growing to fullscreen, you can add an ‘Emacs.Geometry’ entry to the Windows registry settings (see see (emacs)X Resources).
To compute the correct values for width and height, first maximize the Emacs frame and then evaluate (frame-height) and (frame-width) with M-:.



强制输入tab：
c+q tab

